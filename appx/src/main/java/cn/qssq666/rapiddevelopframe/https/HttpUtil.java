/* * *                     .::::. *                   .::::::::. *                  :::::::::::  by qssq666@foxmail.com *              ..:::::::::::' *            '::::::::::::' *              .:::::::::: *         '::::::::::::::.. *              ..::::::::::::. *            ``:::::::::::::::: *             ::::``:::::::::'        .:::. *            ::::'   ':::::'       .::::::::. *          .::::'      ::::     .:::::::'::::. *         .:::'       :::::  .:::::::::' ':::::. *        .::'        :::::.:::::::::'      ':::::. *       .::'         ::::::::::::::'         ``::::. *   ...:::           ::::::::::::'              ``::. *  ```` ':.          ':::::::::'                  ::::.. *                     '.:::::'                    ':'````.. * */package cn.qssq666.rapiddevelopframe.https;import android.app.Activity;import android.app.Dialog;import android.content.Context;import android.content.DialogInterface;import android.net.ConnectivityManager;import android.net.NetworkInfo;import com.alibaba.fastjson.JSON;import com.android.volley.AuthFailureError;import com.android.volley.NetworkError;import com.android.volley.Response;import com.android.volley.VolleyError;import com.android.volley.toolbox.RequestFuture;import com.android.volley.toolbox.StringRequest;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.ProtocolException;import java.net.URL;import java.net.URLConnection;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.concurrent.ExecutionException;import cn.qssq666.rapiddevelopframe.global.SuperAppContext;import cn.qssq666.rapiddevelopframe.https.volley.BackgroundResposeListener;import cn.qssq666.rapiddevelopframe.https.volley.BackgroundStringRequest;import cn.qssq666.rapiddevelopframe.https.volley.BeanListRequest;import cn.qssq666.rapiddevelopframe.https.volley.BeanRequest;import cn.qssq666.rapiddevelopframe.https.volley.VolleyBeanResposeListener;import cn.qssq666.rapiddevelopframe.https.volley.VolleyListResposeListener;import cn.qssq666.rapiddevelopframe.task.QssqTask;import cn.qssq666.rapiddevelopframe.utils.DialogUtils;import cn.qssq666.rapiddevelopframe.utils.Prt;import cz.msebera.android.httpclient.HttpException;public class HttpUtil {    private static final String TAG = "HTTPUtils";    private static void setHttpCommonParams(HttpURLConnection conn) {        conn.setReadTimeout(15000);        conn.setConnectTimeout(30000);        conn.setDoInput(true);        conn.setDoOutput(true);        conn.setUseCaches(false);        conn.setRequestProperty("Connection", "Keep-Alive");        conn.setRequestProperty("Accept-Charset", "UTF-8");        conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");    }    public static void queryData(Context activity, String url, final boolean needProgress, final String tag, boolean enableCache, final NetQuestTask.SimpleRequestDataListener dataListener) {        boolean hasActivity = activity instanceof Activity;        final Dialog dialog = hasActivity && needProgress ? DialogUtils.getProgressDialog((Activity) activity) : null;        NetQuestTask netQuestTask = new NetQuestTask(new NetQuestTask.SimpleRequestDataListener() {            @Override            public void onSuccess(String str) {                if (needProgress && dialog != null) {                    dialog.dismiss();                }                dataListener.onSuccess(str);            }            @Override            public void onFail(String str) {                if (needProgress && dialog != null) {                    dialog.setCancelable(false);                }                dataListener.onFail(str);                if (needProgress && dialog != null) {                    dialog.setTitle("网络错误,请稍候再试!");                    SuperAppContext.getHandler().postDelayed(new Runnable() {                        @Override                        public void run() {                            dialog.dismiss();                        }                    }, 200);                }            }        });        netQuestTask.executeGet(url, enableCache, tag == null && activity instanceof Activity ? activity.getClass().getName() : tag, activity);        if (dialog != null) {            if (dialog != null) {                dialog.setCancelable(true);            }            dialog.setOnCancelListener(new DialogInterface.OnCancelListener() {                @Override                public void onCancel(DialogInterface dialog) {                    if (tag != null) {                        NetQuestTask.cancelRequest(tag);                    }                }            });            dialog.show();        }    }    /**     * HTTP POST通信     *     * @param server_url 服务器URL     * @param message    报文     * @return     */    public static String post(String server_url, String message) {        BufferedWriter bw = null;        BufferedReader br = null;        HttpURLConnection conn = null;        String temp = null;        StringBuffer resp = new StringBuffer();        try {            URL url = new URL(server_url);            conn = (HttpURLConnection) url.openConnection();            setHttpCommonParams(conn);            conn.setRequestMethod("POST");            conn.connect();            bw = new BufferedWriter(new OutputStreamWriter(conn.getOutputStream(), "UTF-8"));            bw.write(message);            bw.flush();            if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {                br = new BufferedReader(new InputStreamReader(conn.getInputStream()));                while ((temp = br.readLine()) != null) {                    resp.append(temp);                }            } else {                Prt.i("网络异常", "响应码:" + conn.getResponseCode());                conn.disconnect();                return null;            }        } catch (MalformedURLException e) {            Prt.w("net error", "网络地址解析错误");            return null;        } catch (ProtocolException e) {            Prt.w("net error", "HTTP方法名设置错误");            return null;        } catch (IOException e) {            Prt.w("net error", "网络输出流打开失败");            return null;        } finally {            bw = null;            br = null;            conn.disconnect();        }        return resp.toString();    }    public static void queryData(Context context, String url, final NetQuestTask.SimpleRequestDataListener stringSimpleRequestDataListener) {        queryData(context, url, NetQuestTask.TAG, false, stringSimpleRequestDataListener);    }    /**     * 传递activity 显示进度.     *     * @param activity     * @param url     * @param stringSimpleRequestDataListener     */    public static void queryData(Activity activity, String url, final NetQuestTask.SimpleRequestDataListener stringSimpleRequestDataListener) {        queryData(activity, url, true, null, true, stringSimpleRequestDataListener);    }    public static void queryData(Activity activity, String url, boolean needProgress, final NetQuestTask.SimpleRequestDataListener stringSimpleRequestDataListener) {        queryData(activity, url, needProgress, null, true, stringSimpleRequestDataListener);    }    public static void queryData(Context context, String url,  boolean showProgess,boolean enableCache, final NetQuestTask.SimpleRequestDataListener listener) {            queryData(context,url,showProgess,null,enableCache,listener);        }    public static void queryData(Context context, String url, String pTag, boolean enableCache, final NetQuestTask.SimpleRequestDataListener listener) { /*       NetQuestTask<String> netQuestTask = new NetQuestTask<>(new NetQuestTask.SimpleRequestDataListener() {            @Override            public void onSuccess(String str) {                listener.onSuccess(str);            }            @Override            public void onFail(String str) {                listener.onFail(str);            }        });        netQuestTask.executeGet(url, enableCache, pTag, context);        */        queryData(context, url, false, pTag, enableCache, listener);    }    public static <T> void queryList(final Context context, final Class<T> classs, final String url, final JSONListParseResposeListener<T> resposeListener) {        queryList(context, classs, url, true, NetQuestTask.TAG, null, resposeListener);    }    public static <T> void queryList(final Context context, final Class<T> classs, final String url, boolean enableCache, String tag, final HashMap<String, String> hashMap, final JSONListParseResposeListener<T> resposeListener) {        if (NetQuestTask.netError && enableCache) {            new QssqTask<>(new QssqTask.ICallBackImp<List<T>>() {                @Override                public List<T> onRunBackgroundThread() {                    String cache = NetQuestTask.getCache(context, url);                    if (cache != null) {                        String listJSON = resposeListener.getMainKeyJson(cache);                        List<T> ts = JSON.parseArray(listJSON, classs);                        return ts;                    }                    return null;                }                @Override                public void onRunFinish(List<T> o) {                    if (o != null) {                        resposeListener.onSucc(o);                    } else {                        resposeListener.onError(new HttpException("网络故障"));                    }                }            }).execute();            return;        }        BeanListRequest<T> jsonListRequest = new BeanListRequest<T>(com.android.volley.Request.Method.GET, classs, url, new VolleyListResposeListener<T>() {            @Override            public String onParseEntryJSON(String json) {                return resposeListener.getMainKeyJson(json);            }            @Override            public void onResponse(List<T> response) {                resposeListener.onSucc(response);            }        }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {                resposeListener.onError(error);            }        }) {            @Override            public Map<String, String> getHeaders() throws AuthFailureError {                return hashMap == null ? super.getHeaders() : hashMap;            }        };        jsonListRequest.setTag(tag);        NetQuestTask.getRequestQueue(context).add(jsonListRequest);    }    public static void queryFirstFromLocalAfterNet(final Context context, final String url, final String tag, final NetQuestTask.SimpleRequestDataListener listener) {        new QssqTask<String>(new QssqTask.ICallBackImp<Object>() {            @Override            public Object onRunBackgroundThread() {                String cache = NetQuestTask.getCache(context, url);                if (cache != null) {                    return cache;                } else {                    try {                        return syncQuery(context, url, tag);                    } catch (ExecutionException e) {                        e.printStackTrace();                        return e;                    } catch (InterruptedException e) {                        e.printStackTrace();                        return e;                    }                }            }            @Override            public void onRunFinish(Object o) {                if (o != null && !(o instanceof Exception)) {                    listener.onSuccess(o.toString());                } else {                    listener.onFail(o + "");                }            }        }).execute();    }    /**     * 使用volley同步查询     *     * @param context     * @param url     * @param pTag     * @return     * @throws ExecutionException     * @throws InterruptedException     */    public static String syncQuery(Context context, String url, String pTag) throws ExecutionException, InterruptedException {        RequestFuture<String> future = RequestFuture.newFuture();        StringRequest request = new StringRequest(url, future, future);        NetQuestTask.getRequestQueue(SuperAppContext.getInstance()).add(request);        NetQuestTask.setDefaultRequestTAG(request, pTag);        String result = future.get();        return result;    }    public static String syncQuery(Context context, String url) throws ExecutionException, InterruptedException {        return syncQuery(context, url, null);    }    public static <T> void queryBean(final Class<T> classs, final String url, boolean enableCache, String tag, final Context context, final HashMap<String, String> hashMap, final JSONListParseResposeListener<T> resposeListener) {        if (Prt.LOGGABLE) {            Prt.w(TAG, "URL:" + url);        }        if (NetQuestTask.netError && enableCache) {            new QssqTask<>(new QssqTask.ICallBackImp<List<T>>() {                @Override                public List<T> onRunBackgroundThread() {                    String cache = NetQuestTask.getCache(context, url);                    if (cache != null) {                        String listJSON = resposeListener.getMainKeyJson(cache);                        List<T> ts = JSON.parseArray(listJSON, classs);                        return ts;                    }                    return null;                }                @Override                public void onRunFinish(List<T> o) {                    if (o != null) {                        resposeListener.onSucc(o);                    } else {                        resposeListener.onError(new NetworkError());                    }                }            }).execute();            return;        }        BeanRequest<T> jsonListRequest = new BeanRequest<T>(com.android.volley.Request.Method.GET, classs, url, new VolleyBeanResposeListener<T>() {            @Override            public String onParseEntryJSON(String json) {                return resposeListener.getMainKeyJson(json);            }            @Override            public void onResponse(T response) {            }        }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {                resposeListener.onError(error);            }        }) {            @Override            public Map<String, String> getHeaders() throws AuthFailureError {                return hashMap == null ? super.getHeaders() : hashMap;            }        };        jsonListRequest.setTag(tag);        NetQuestTask.getRequestQueue(context).add(jsonListRequest);    }    public static <T> void genericParseRequest(final Context context, final String url, boolean enableCache, final GenericParseResposeListener<T> resposeListener) {        genericParseRequest(context, url, enableCache, NetQuestTask.TAG, null, resposeListener);    }    public static <T> void genericParseRequest(final Context context, final String url, boolean enableCache, String tag, final GenericParseResposeListener<T> resposeListener) {        genericParseRequest(context, url, enableCache, tag, null, resposeListener);    }    public static <T> void genericParseRequest(final Context context, final String url, boolean enableCache, HashMap hashMap, final GenericParseResposeListener<T> resposeListener) {        genericParseRequest(context, url, enableCache, NetQuestTask.TAG, hashMap, resposeListener);    }    public static <T> void genericParseRequest(final Context context, final String url, HashMap hashMap, final GenericParseResposeListener<T> resposeListener) {        genericParseRequest(context, url, true, NetQuestTask.TAG, hashMap, resposeListener);    }    public static <T> void genericParseRequest(final Context context, final String url, final GenericParseResposeListener<T> resposeListener) {        genericParseRequest(context, url, true, NetQuestTask.TAG, null, resposeListener);    }    public static <T> void genericParseRequest(final Context context, final String url, boolean enableCache, String tag, final HashMap<String, String> hashMap, final GenericParseResposeListener<T> resposeListener) {        if (Prt.LOGGABLE) {            Prt.w(TAG, "URL:" + url);        }        if (NetQuestTask.netError && enableCache) {            new QssqTask<>(new QssqTask.ICallBackImp<T>() {                @Override                public T onRunBackgroundThread() {                    String cache = NetQuestTask.getCache(context, url);                    if (cache != null) {                        T t = resposeListener.onBackgroundParse(cache);                        return t;                    }                    return null;                }                @Override                public void onRunFinish(T o) {                    if (o != null) {                        resposeListener.onSucc(o);                    } else {                        resposeListener.onError(new NetworkError());                    }                }            }).execute();            return;        }        BackgroundStringRequest<T> jsonListRequest = new BackgroundStringRequest<T>(com.android.volley.Request.Method.GET, url, new BackgroundResposeListener<T>() {            @Override            public T onBackgroundParseEntry(String json) {                return resposeListener.onBackgroundParse(json);            }            @Override            public void onResponse(T response) {                resposeListener.onSucc(response);            }        }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {                resposeListener.onError(error);            }        }) {            @Override            public Map<String, String> getHeaders() throws AuthFailureError {                return hashMap == null ? super.getHeaders() : hashMap;            }        };        jsonListRequest.setTag(tag);        NetQuestTask.getRequestQueue(context).add(jsonListRequest);    }//    public static String synchronizedNetQueryData(String url){//        RequestFuture<Object> future = RequestFuture.newFuture();//        future.get();//        StringRequest request = new StringRequest(url,new );//        VjsonVolley.addRequest(request);//        try {//            String result = future.get();//            //future.get(timeout, unit)//            Prt.w(MainActivity.class.getSimpleName(), result);//        } catch (InterruptedException e) {//            e.printStackTrace();//        } catch (ExecutionException e) {//            e.printStackTrace();//        }////    }    public static boolean judgeNetIsConnected(Context context) {        ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);        NetworkInfo activeNetworkInfo = cm.getActiveNetworkInfo();        if (activeNetworkInfo == null || !activeNetworkInfo.isAvailable())            return false;        switch (activeNetworkInfo.getType()) {            case ConnectivityManager.TYPE_MOBILE://也可能有蓝牙网络，或电脑共享的网络我觉得依然可以上网额。 本条件成立 将直接跳到下1个case            case ConnectivityManager.TYPE_WIFI:                return true;            default:                return true;        }    }    public static String doGet(String url) throws Exception {        URL localURL = new URL(url);        URLConnection connection = localURL.openConnection();        HttpURLConnection httpURLConnection = (HttpURLConnection) connection;        httpURLConnection.setRequestProperty("Accept-Charset", "utf-8");        httpURLConnection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");        InputStream inputStream = null;        InputStreamReader inputStreamReader = null;        BufferedReader reader = null;        StringBuffer resultBuffer = new StringBuffer();        String tempLine = null;        if (httpURLConnection.getResponseCode() >= 300) {            throw new Exception("HTTP Request is not success, Response code is " + httpURLConnection.getResponseCode());        }        try {            inputStream = httpURLConnection.getInputStream();            inputStreamReader = new InputStreamReader(inputStream);            reader = new BufferedReader(inputStreamReader);            while ((tempLine = reader.readLine()) != null) {                resultBuffer.append(tempLine);            }        } finally {            if (reader != null) {                reader.close();            }            if (inputStreamReader != null) {                inputStreamReader.close();            }            if (inputStream != null) {                inputStream.close();            }        }        return resultBuffer.toString();    }    public static InputStream doGet1(String url) throws Exception {        URL localURL = new URL(url);        URLConnection connection = localURL.openConnection();        HttpURLConnection httpURLConnection = (HttpURLConnection) connection;        httpURLConnection.setRequestProperty("Accept-Charset", "utf-8");        httpURLConnection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");        InputStream inputStream = null;        InputStreamReader inputStreamReader = null;        if (httpURLConnection.getResponseCode() >= 300) {            throw new Exception("HTTP Request is not success, Response code is " + httpURLConnection.getResponseCode());        }        try {            inputStream = httpURLConnection.getInputStream();        } catch (Exception e) {            return null;        }        return inputStream;    }//    public static InputStream sendGet(String url) {//        HttpClient client = new DefaultHttpClient();//        HttpGet get = new HttpGet(url);//        get.getParams().setParameter(HttpConnectionParams.CONNECTION_TIMEOUT, 3000);//        try {//            HttpResponse response = client.execute(get);//            if (response.getStatusLine().getStatusCode() == 200)//                return response.getEntity().getContent();//            System.out.println("状态码异常");//        } catch (IOException e) {//            e.printStackTrace();//            System.out.println("访问网络异常");//        }////        return null;////    }    /**     * @param context     * @param url     * @param hashMap                         传递头部数据     * @param stringSimpleRequestDataListener     */    public static void queryDataWithHeadData(Context context, String url, HashMap<String, String> hashMap, final NetQuestTask.SimpleRequestDataListener stringSimpleRequestDataListener) {        Prt.w(TAG, "地址:" + url);        NetQuestTask<String> netQuestTask = new NetQuestTask<>(new NetQuestTask.SimpleRequestDataListener() {            @Override            public void onSuccess(String str) {                stringSimpleRequestDataListener.onSuccess(str);            }            @Override            public void onFail(String str) {                stringSimpleRequestDataListener.onFail(str);            }        });        netQuestTask.executeGet(url, context, hashMap);    }}